//
// server.cpp
// ~~~~~~~~~~
//
// Copyright (c) 2003-2012 Christopher M. Kohlhoff (chris at kohlhoff dot com)
// Copyright (c) 2013 Alex Caudill (alex at furosys.com)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "http/server.hpp"
#include <boost/bind.hpp>

namespace http {
    namespace market {

        server::server(
            const std::string& address,
            const std::string& port,
            const std::string& doc_root,
            std::size_t io_service_pool_size) : io_service_pool_(io_service_pool_size),
                                                signals_(io_service_pool_.get_io_service()),
                                                acceptor_(io_service_pool_.get_io_service()),
                                                new_connection_(),
                                                request_handler_(doc_root)
        {
            // Register to handle the signals that indicate when the server should exit.
            // It is safe to register for the same signal multiple times in a program,
            // provided all registration for the specified signal is made through Asio.
            signals_.add(SIGINT);
            signals_.add(SIGTERM);
            #if defined(SIGQUIT)
                signals_.add(SIGQUIT);
            #endif // defined(SIGQUIT)
            signals_.async_wait(boost::bind(&server::handle_stop, this));

            // Open the acceptor with the option to reuse the address (i.e. SO_REUSEADDR).
            boost::asio::ip::tcp::resolver resolver(acceptor_.get_io_service());
            boost::asio::ip::tcp::resolver::query query(address, port);
            boost::asio::ip::tcp::endpoint endpoint = *resolver.resolve(query);
            acceptor_.open(endpoint.protocol());
            acceptor_.set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));
            acceptor_.bind(endpoint);
            acceptor_.listen();

            start_accept();
        }

        void server::run() {
            io_service_pool_.run();
        }

        void server::start_accept() {
            new_connection_.reset(
                new connection(
                    io_service_pool_.get_io_service(), 
                    request_handler_)
                );

            acceptor_.async_accept(
                new_connection_->socket(),
                boost::bind(
                    &server::handle_accept,
                    this,
                    boost::asio::placeholders::error
                )
            );
        }

        void server::handle_accept(const boost::system::error_code& e) {
            if (!e) {
                new_connection_->start();
            }
            start_accept();
        }

        void server::handle_stop() {
            io_service_pool_.stop();
        }
    } // namespace market
} // namespace http
