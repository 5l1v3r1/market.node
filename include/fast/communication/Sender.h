// Copyright (c) 2009, 2010, 2011 Object Computing, Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice,
//      this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice,
//      this list of conditions and the following disclaimer in the documentation
//      and/or other materials provided with the distribution.
//    * Neither the name of Object Computing, Inc. nor the names of its
//      contributors may be used to endorse or promote products derived from this
//      software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifdef _MSC_VER
# pragma once
#endif
#ifndef SENDER_H
#define SENDER_H
// All inline, do not export.
//#include <Common/QuickFAST_Export.h>
#include "Sender_fwd.h"
#include <Communication/BufferRecycler.h>

namespace QuickFAST
{
  namespace Communication
  {
    /// @brief Sender base class for sending outgoing data
    class Sender
    {
    public:
      /// @brief construct
      /// @param recycler to handle empty buffers after their contents have been sent
      Sender(BufferRecycler & recycler)
        : recycler_(recycler)
      {
      }
      virtual ~Sender()
      {
      }

      /// @brief prepare for sending
      virtual void open() = 0;

      /// @brief send a buffer full of data
      virtual void send(LinkedBuffer * buffer) = 0;

      /// @brief tell the sender to stop after completing any pending writes
      virtual void stop() = 0;

      /// @brief clean up resources used by the sender; this cancels outstanding writes
      virtual void close() = 0;

    protected:
      /// @brief return a used/empty buffer to the caller
      void recycle(LinkedBuffer * buffer)
      {
        recycler_.recycle(buffer);
      }

    private:
      Sender & operator=(Sender &); // no autogenerated assignment
    private:
      BufferRecycler & recycler_;
    };
  }
}
#endif // SENDER_H
